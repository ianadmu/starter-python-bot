There are conceptually five sections that behaviour belongs in Zacc

Main - the app.py file that functions as a main method and deals with being hosted on a beep boop server
Control - The central control files, all other sections communicate with the Contol level and only the Contol level. Persistence and connection retries belongs here.
	(Think of this as like Zacc's OS)
Slack API - The center for making api calls to slack. No logic happens here, and this is the only place where the token is used.
Managers - These are a central source of user information and channel information. These get updated as necessary.
Masters - These are the files that contain information on Zacc's functions, like responding to queues, or timed events.
	(How this section is organized is outside the scope of this section)

Note some functionality will need to be refactored, but these files loosely belong in the following categories

Main:
	app.py
	config_manager.py (This might belong in Control, I don't know what it does)  # Malcolm ?

Control:
	common.py
	constants.py *does not exist yet, but should
	messenger.py
	persistance_manager.py
	slack_bot.py
	event_handler.py

Slack API:
	slack_clients.py

Managers:
	channel_manager.py
	user_manager.py

Masters: #These should be renamed to master as appropriate
	# Nicole here: I also think these need to be organized further (subcategorized), see further comments
	emoji_master.py
	equation_manager.py
	game_manager.py
	loud_manager.py
	markov.py
	response_master.py
	rude_manager.py
	terminal_manager.py
	time_triggered_event_manager.py
	weather_manager.py
	whos_that_pokemon_manager.py

What is this even?	
	test.py   # Nicole here: I think Malcolm might be using this for persistance testing ?
	__init__.py  # Nicole here: I think python folders have an __init__.py by default
	# Further reading here: http://stackoverflow.com/questions/448271/what-is-init-py-for
	temp_file  # Nicole here: deleted this, but think Malcolm might have been using it for persistance too



Masters section:
	This section will likely have a lot of variety of what is happening inside of it
	Some guidelines that should be followed

	1.A class with a suffix of master should only be created once, and in the Control scope
	2.Using folders is encouraged
	3.For content that can change without requiring code changes a resouce file should be used for easy editing
	4.If a master crashes it should be logged, and not cause Zacc to die
		A. This should be implemented with a common parent class that handles running with a few variations on run and accept input so that each master doesn't need the same code bits

	# Nicole here (again, and with comments): 
	# I think the masters need to be further differianted with at least the 2 following categories:
	# 	1. The masters that actually cause messages to be posted to slack (for example those that call 
	#      self.send_message()) such as response_master and time_triggered_event_manager 
	# 	2. The masters that just return a string or something of the sort which `Control` then uses to post to slack
	# I think we have 3 choices in regards to this:
	# 	a. we differentiate these 2 kinds by them having a different super class (if necessary) or just call one
	#      group master and the other group something else
	# 	b. move the first kind to be a part of the `Control` group too or
	# 	c. we modify the first kind to only return input which a `Control` class is then in charge of posting to slack


--Garrett